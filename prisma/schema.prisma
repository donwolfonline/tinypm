// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for direct connection, e.g. migrations
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

enum Theme {
  YELLOW    // #FFCC00 to #FFA500 (Default)
  BLUE      // #60A5FA to #2563EB
  GREEN     // #34D399 to #059669
  PURPLE    // #A855F7 to #6D28D9
  DARK      // #1F2937 to #1F2937
  DAISY     // #FDFBF7 to #FFF9E5
  ROSE      // #FDF2F8 to #FBCFE8
  SLATE     // #475569 to #334155
}

enum ContentType {
  LINK
  TITLE
  DIVIDER
  TEXT
}

enum SubscriptionStatus {
  ACTIVE     // Subscription is active and paid
  PAST_DUE   // Payment failed but grace period active
  CANCELED   // Subscription canceled but period not ended
  EXPIRED    // Subscription ended
}

enum DomainStatus {
  PENDING            // Initial state
  DNS_VERIFICATION   // DNS records are being verified
  ACTIVE             // Domain is verified and working
  FAILED             // Verification failed
  SUSPENDED          // Domain was suspended (e.g., abuse)
}

model Subscription {
  id                 String            @id @default(cuid())
  userId             String            @unique
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  status             SubscriptionStatus
  stripeSubscriptionId String          @unique  // Stripe subscription ID
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([status])
  @@index([currentPeriodEnd])
}

model Content {
  id          String      @id @default(cuid())
  type        ContentType @default(LINK)
  title       String?
  url         String?
  text        String?
  emoji       String?
  order       Int         @default(0)
  enabled     Boolean     @default(true)
  clicks      Int         @default(0)
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
  @@index([type])
}

model CustomDomain {
  id                String       @id @default(cuid())
  domain            String       @unique
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status            DomainStatus @default(PENDING)
  verificationCode  String       @unique
  verificationAttempts Int       @default(0)
  lastAttemptAt     DateTime?
  verifiedAt        DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  primary           Boolean      @default(false)
  errorMessage      String?      // Store last error message
  cnameTarget       String       @default("tiny.pm") // Allows changing target if needed
  
  // Track subscription status
  subscriptionId    String?      // Link to user's subscription
  
  @@index([userId])
  @@index([domain])
  @@index([status])
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  username           String?        @unique
  theme              Theme          @default(YELLOW)
  pageTitle          String?
  pageDesc           String?
  lastLogin          DateTime?      // Track last login time
  
  // Stripe-related fields
  stripeCustomerId   String?        @unique  // Stripe customer ID
  subscription       Subscription?  // One-to-one relation with active subscription
  
  // Relations
  accounts           Account[]
  sessions           Session[]
  content            Content[]
  customDomains      CustomDomain[]
  
  // Timestamps
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@index([username])
  @@index([email])
  @@index([stripeCustomerId])
}

// NextAuth.js models remain unchanged
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}